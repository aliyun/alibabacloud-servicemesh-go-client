// Copyright 2023 Alibaba Cloud Service Mesh
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"istio.io/client-go/asmpkg/clientset/scheme"
	"net/http"

	v1 "istio.io/api/alibabacloud-servicemesh/v1"
	rest "k8s.io/client-go/rest"
)

type IstioV1Interface interface {
	RESTClient() rest.Interface
	ASMAdaptiveConcurrenciesGetter
	ASMCircuitBreakersGetter
	ASMEgressTrafficPoliciesGetter
	ASMLocalRateLimitersGetter
}

// IstioV1Client is used to interact with features provided by the istio.alibabacloud.com group.
type IstioV1Client struct {
	restClient rest.Interface
}

func (c *IstioV1Client) ASMAdaptiveConcurrencies(namespace string) ASMAdaptiveConcurrencyInterface {
	return newASMAdaptiveConcurrencies(c, namespace)
}

func (c *IstioV1Client) ASMCircuitBreakers(namespace string) ASMCircuitBreakerInterface {
	return newASMCircuitBreakers(c, namespace)
}

func (c *IstioV1Client) ASMEgressTrafficPolicies(namespace string) ASMEgressTrafficPolicyInterface {
	return newASMEgressTrafficPolicies(c, namespace)
}

func (c *IstioV1Client) ASMLocalRateLimiters(namespace string) ASMLocalRateLimiterInterface {
	return newASMLocalRateLimiters(c, namespace)
}

// NewForConfig creates a new IstioV1Client for the given config.
// NewForConfig is equivalent to NewForConfigAndClient(c, httpClient),
// where httpClient was generated with rest.HTTPClientFor(c).
func NewForConfig(c *rest.Config) (*IstioV1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	httpClient, err := rest.HTTPClientFor(&config)
	if err != nil {
		return nil, err
	}
	return NewForConfigAndClient(&config, httpClient)
}

// NewForConfigAndClient creates a new IstioV1Client for the given config and http client.
// Note the http client provided takes precedence over the configured transport values.
func NewForConfigAndClient(c *rest.Config, h *http.Client) (*IstioV1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientForConfigAndClient(&config, h)
	if err != nil {
		return nil, err
	}
	return &IstioV1Client{client}, nil
}

// NewForConfigOrDie creates a new IstioV1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *IstioV1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new IstioV1Client for the given RESTClient.
func New(c rest.Interface) *IstioV1Client {
	return &IstioV1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *IstioV1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
