// Copyright 2023 Alibaba Cloud Service Mesh
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1 "istio.io/api/alibabacloud-servicemesh/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeASMLocalRateLimiters implements ASMLocalRateLimiterInterface
type FakeASMLocalRateLimiters struct {
	Fake *FakeIstioV1
	ns   string
}

var asmlocalratelimitersResource = v1.SchemeGroupVersion.WithResource("asmlocalratelimiters")

var asmlocalratelimitersKind = v1.SchemeGroupVersion.WithKind("ASMLocalRateLimiter")

// Get takes name of the aSMLocalRateLimiter, and returns the corresponding aSMLocalRateLimiter object, and an error if there is any.
func (c *FakeASMLocalRateLimiters) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.ASMLocalRateLimiter, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(asmlocalratelimitersResource, c.ns, name), &v1.ASMLocalRateLimiter{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.ASMLocalRateLimiter), err
}

// List takes label and field selectors, and returns the list of ASMLocalRateLimiters that match those selectors.
func (c *FakeASMLocalRateLimiters) List(ctx context.Context, opts metav1.ListOptions) (result *v1.ASMLocalRateLimiterList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(asmlocalratelimitersResource, asmlocalratelimitersKind, c.ns, opts), &v1.ASMLocalRateLimiterList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1.ASMLocalRateLimiterList{ListMeta: obj.(*v1.ASMLocalRateLimiterList).ListMeta}
	for _, item := range obj.(*v1.ASMLocalRateLimiterList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested aSMLocalRateLimiters.
func (c *FakeASMLocalRateLimiters) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(asmlocalratelimitersResource, c.ns, opts))

}

// Create takes the representation of a aSMLocalRateLimiter and creates it.  Returns the server's representation of the aSMLocalRateLimiter, and an error, if there is any.
func (c *FakeASMLocalRateLimiters) Create(ctx context.Context, aSMLocalRateLimiter *v1.ASMLocalRateLimiter, opts metav1.CreateOptions) (result *v1.ASMLocalRateLimiter, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(asmlocalratelimitersResource, c.ns, aSMLocalRateLimiter), &v1.ASMLocalRateLimiter{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.ASMLocalRateLimiter), err
}

// Update takes the representation of a aSMLocalRateLimiter and updates it. Returns the server's representation of the aSMLocalRateLimiter, and an error, if there is any.
func (c *FakeASMLocalRateLimiters) Update(ctx context.Context, aSMLocalRateLimiter *v1.ASMLocalRateLimiter, opts metav1.UpdateOptions) (result *v1.ASMLocalRateLimiter, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(asmlocalratelimitersResource, c.ns, aSMLocalRateLimiter), &v1.ASMLocalRateLimiter{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.ASMLocalRateLimiter), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeASMLocalRateLimiters) UpdateStatus(ctx context.Context, aSMLocalRateLimiter *v1.ASMLocalRateLimiter, opts metav1.UpdateOptions) (*v1.ASMLocalRateLimiter, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(asmlocalratelimitersResource, "status", c.ns, aSMLocalRateLimiter), &v1.ASMLocalRateLimiter{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.ASMLocalRateLimiter), err
}

// Delete takes name of the aSMLocalRateLimiter and deletes it. Returns an error if one occurs.
func (c *FakeASMLocalRateLimiters) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(asmlocalratelimitersResource, c.ns, name, opts), &v1.ASMLocalRateLimiter{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeASMLocalRateLimiters) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(asmlocalratelimitersResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1.ASMLocalRateLimiterList{})
	return err
}

// Patch applies the patch and returns the patched aSMLocalRateLimiter.
func (c *FakeASMLocalRateLimiters) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.ASMLocalRateLimiter, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(asmlocalratelimitersResource, c.ns, name, pt, data, subresources...), &v1.ASMLocalRateLimiter{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.ASMLocalRateLimiter), err
}
